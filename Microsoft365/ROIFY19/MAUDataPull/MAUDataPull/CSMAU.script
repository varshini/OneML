//Script GUID:cfc286cf-f62c-464d-a394-cc19c4d2e892
//Used for tracking history


//Script GUID:eb5e5000-6fef-493a-81ca-2aa758000a42
//Used for tracking history
// ====================================================================================================================
// <copyright company="Microsoft Inc">
//   (c) 2020 Microsoft Inc.
// </copyright>
// <summary>
// 
// 
// </summary>
// <history>
// 
// </history>
// ====================================================================================================================
// Tools for GDPR tagging
MODULE "/shares/PXSCosmos14.Prod/PXS.DeleteSignal.PROD/PrivacyAnnotation/PrivacyAnnotation.module";
USING Privacy;

#DECLARE longTailInput string = DateTime.UtcNow.ToString(); 

#DECLARE snapDateTime DateTime = DateTime.Parse( "02/28/2018" );

#DECLARE enddateDateTime DateTime = @snapDateTime.AddDays(-1);
#DECLARE enddateString string = @enddateDateTime.ToString("yyyy-MM-dd");
#DECLARE startdateDateTime DateTime = @enddateDateTime.AddDays(-28);
#DECLARE startdateString string = @startdateDateTime.ToString("yyyy-MM-dd");
#DECLARE outputfolderpath string = "/local/Projects/ROI/CSMAU/";


//-------- EXO --------

#DECLARE outputEXOMAU string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "EXOMAU", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));

InEXODailyUsage =
    SSTREAM STREAMSET "/shares/IDEAs.Prod/Release/activeusage/exchangecommercial/"
            PATTERN "%Y/%m/EXOActiveUsage_%Y_%m_%d.ss"
            RANGE __date = [@startdateString, @enddateString];

//Get All EXO Usage (all platforms)
EXODailyUsage_All = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InEXODailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId);

///Get EXO Usage excluding Web and Mobile
EXODailyUsage_Desktop = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InEXODailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase))
          AND Platform NOT IN ("Web", "Mobile");


////Add a flag for every user to indicate if there is Web and Mobile usage
EXODailyUsage = 
    SELECT  A.UserId,
            A.OmsTenantId,
            A.Application,
            A.Office365Instance,
            (B.UserId != null ? 1 : 0) AS HasDesktopUsage
    FROM  EXODailyUsage_All AS A
    LEFT OUTER JOIN EXODailyUsage_Desktop AS B
        ON A.UserId == B.UserId
        AND A.OmsTenantId == B.OmsTenantId;
        
        
[Privacy.Asset.LongTail(@longTailInput)] 
OUTPUT EXODailyUsage
TO SSTREAM @outputEXOMAU
CLUSTERED BY OmsTenantId
WITH STREAMEXPIRY "365";


//-------- SPO --------


#DECLARE outputSPOMAU string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "SPOMAU", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));

InSPODailyUsage =
    SSTREAM STREAMSET "/shares/IDEAs.Prod/Release/activeusage/sharepointcommercial/"
            PATTERN "%Y/%m/SharepointActiveUsage_%Y_%m_%d.ss"
            RANGE __date = [@startdateString, @enddateString];

//Get All SPO Usage (all platforms)
SPODailyUsage_All = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InSPODailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId);

///Get SPO Usage excluding Web and Mobile
SPODailyUsage_Desktop = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InSPODailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase))
          AND Platform NOT IN ("Web", "Mobile");


////Add a flag for every user to indicate if there is Weband Mobile usage
SPODailyUsage = 
    SELECT  A.UserId,
            A.OmsTenantId,
            A.Application,
            A.Office365Instance,
            (B.UserId != null ? 1 : 0) AS HasDesktopUsage
    FROM  SPODailyUsage_All AS A
    LEFT OUTER JOIN SPODailyUsage_Desktop AS B
        ON A.UserId == B.UserId
        AND A.OmsTenantId == B.OmsTenantId;
        

[Privacy.Asset.LongTail(@longTailInput)] 
OUTPUT SPODailyUsage
TO SSTREAM @outputSPOMAU
CLUSTERED BY OmsTenantId
WITH STREAMEXPIRY "365";


//-------- ODB --------

#DECLARE outputODBMAU string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "ODBMAU", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));

InODBDailyUsage =
    SSTREAM STREAMSET "/shares/IDEAs.Prod/Release/activeusage/onedriveforbusinesscommercial/"
            PATTERN "%Y/%m/OneDriveForBusinessActiveUsage_%Y_%m_%d.ss"
            RANGE __date = [@startdateString, @enddateString];

//Get All ODB Usage (all platforms)
ODBDailyUsage_All = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InODBDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId);

///Get ODB Usage excluding Web and Mobile
ODBDailyUsage_Desktop = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InODBDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase))
          AND Platform NOT IN ("Web", "Mobile");


////Add a flag for every user to indicate if there is Weband Mobile usage
ODBDailyUsage = 
    SELECT  A.UserId,
            A.OmsTenantId,
            A.Application,
            A.Office365Instance,
            (B.UserId != null ? 1 : 0) AS HasDesktopUsage
    FROM  ODBDailyUsage_All AS A
    LEFT OUTER JOIN ODBDailyUsage_Desktop AS B
        ON A.UserId == B.UserId
        AND A.OmsTenantId == B.OmsTenantId;
        
        
[Privacy.Asset.LongTail(@longTailInput)] 
OUTPUT ODBDailyUsage
TO SSTREAM @outputODBMAU
CLUSTERED BY OmsTenantId
WITH STREAMEXPIRY "365";


//-------- SfB --------

#DECLARE outputSfBMAU string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "SfBMAU", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));

InSfBDailyUsage =
    SSTREAM STREAMSET "/shares/IDEAs.Prod/Release/activeusage/skypeforbusinesscommercial/"
            PATTERN "%Y/%m/SkypeForBusinessActiveUsage_%Y_%m_%d.ss"
            RANGE __date = [@startdateString, @enddateString];

//Get All SfB Usage (all platforms)
SfBDailyUsage_All = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InSfBDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId);

///Get SfB Usage excluding Web and Mobile
SfBDailyUsage_Desktop = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InSfBDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase))
          AND Platform NOT IN ("Web", "Mobile");


////Add a flag for every user to indicate if there is Weband Mobile usage
SfBDailyUsage = 
    SELECT  A.UserId,
            A.OmsTenantId,
            A.Application,
            A.Office365Instance,
            (B.UserId != null ? 1 : 0) AS HasDesktopUsage
    FROM  SfBDailyUsage_All AS A
    LEFT OUTER JOIN SfBDailyUsage_Desktop AS B
        ON A.UserId == B.UserId
        AND A.OmsTenantId == B.OmsTenantId;
        

[Privacy.Asset.LongTail(@longTailInput)] 
OUTPUT SfBDailyUsage
TO SSTREAM @outputSfBMAU
CLUSTERED BY OmsTenantId
WITH STREAMEXPIRY "365";



//-------- Teams --------


#DECLARE outputTeamsMAU string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "TeamsMAU", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));

InTeamsDailyUsage =
    SSTREAM STREAMSET "/shares/IDEAs.Prod/Release/activeusage/teamscommercial/"
            PATTERN "%Y/%m/TeamsActiveUsage_%Y_%m_%d.ss"
            RANGE __date = [@startdateString, @enddateString];

//Get All Teams Usage (all platforms)
TeamsDailyUsage_All = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InTeamsDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId);

///Get Teams Usage excluding Web and Mobile
TeamsDailyUsage_Desktop = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InTeamsDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase))
          AND Platform NOT IN ("Web", "Mobile");


////Add a flag for every user to indicate if there is Web and Mobile usage
TeamsDailyUsage = 
    SELECT  A.UserId,
            A.OmsTenantId,
            A.Application,
            A.Office365Instance,
            (B.UserId != null ? 1 : 0) AS HasDesktopUsage
    FROM  TeamsDailyUsage_All AS A
    LEFT OUTER JOIN TeamsDailyUsage_Desktop AS B
        ON A.UserId == B.UserId
        AND A.OmsTenantId == B.OmsTenantId;
        
[Privacy.Asset.LongTail(@longTailInput)]
OUTPUT TeamsDailyUsage
TO SSTREAM @outputTeamsMAU
CLUSTERED BY OmsTenantId
WITH STREAMEXPIRY "365";



//-------- Yammer --------


#DECLARE outputYammerMAU string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "YammerMAU", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));

InYammerDailyUsage =
    SSTREAM STREAMSET "/shares/IDEAs.Prod/Release/activeusage/yammercommercial/"
            PATTERN "%Y/%m/YammerActiveUsage_%Y_%m_%d.ss"
            RANGE __date = [@startdateString, @enddateString];

//Get All Yammer Usage (all platforms)
YammerDailyUsage_All = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InYammerDailyUsage
    WHERE true
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId);
          
///Get Yammer Usage excluding Web and Mobile
YammerDailyUsage_Desktop = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InYammerDailyUsage
    WHERE true
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase))
          AND Platform NOT IN ("Web", "Mobile");


////Add a flag for every user to indicate if there is Weband Mobile usage
YammerDailyUsage = 
    SELECT  A.UserId,
            A.OmsTenantId,
            A.Application,
            A.Office365Instance,
            (B.UserId != null ? 1 : 0) AS HasDesktopUsage
    FROM  YammerDailyUsage_All AS A
    LEFT OUTER JOIN YammerDailyUsage_Desktop AS B
        ON A.UserId == B.UserId
        AND A.OmsTenantId == B.OmsTenantId;          


[Privacy.Asset.LongTail(@longTailInput)] 
OUTPUT YammerDailyUsage
TO SSTREAM @outputYammerMAU
CLUSTERED BY OmsTenantId
WITH STREAMEXPIRY "365";



//-------- Word --------


#DECLARE outputWordMAU string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "WordMAU", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));

InWordDailyUsage =
    SSTREAM STREAMSET "/shares/IDEAs.Prod/Release/activeusage/wordcommercialuser/"
            PATTERN "%Y/%m/WordActiveUsage_%Y_%m_%d.ss"
            RANGE __date = [@startdateString, @enddateString];

//Get All Word Usage (all platforms)
WordDailyUsage_All = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InWordDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase));

///Get Word Usage excluding Web and Mobile
WordDailyUsage_Desktop = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InWordDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase))
          AND Platform NOT IN ("Web", "Mobile");


////Add a flag for every user to indicate if there is Web and Mobile usage
WordDailyUsage = 
    SELECT  A.UserId,
            A.OmsTenantId,
            A.Application,
            A.Office365Instance,
            (B.UserId != null ? 1 : 0) AS HasDesktopUsage
    FROM  WordDailyUsage_All AS A
    LEFT OUTER JOIN WordDailyUsage_Desktop AS B
        ON A.UserId == B.UserId
        AND A.OmsTenantId == B.OmsTenantId;
    
  
  
[Privacy.Asset.LongTail(@longTailInput)] 
OUTPUT WordDailyUsage
TO SSTREAM @outputWordMAU
CLUSTERED BY OmsTenantId
WITH STREAMEXPIRY "365";



//-------- Excel --------


#DECLARE outputExcelMAU string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "ExcelMAU", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));

InExcelDailyUsage =
    SSTREAM STREAMSET "/shares/IDEAs.Prod/Release/activeusage/excelcommercialuser/"
            PATTERN "%Y/%m/ExcelActiveUsage_%Y_%m_%d.ss"
            RANGE __date = [@startdateString, @enddateString];

//Get All Excel Usage (all platforms)
ExcelDailyUsage_All = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InExcelDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase));

///Get Excel Usage excluding Web and Mobile
ExcelDailyUsage_Desktop = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InExcelDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase))
          AND Platform NOT IN ("Web", "Mobile");


////Add a flag for every user to indicate if there is Web and Mobile usage
ExcelDailyUsage = 
    SELECT  A.UserId,
            A.OmsTenantId,
            A.Application,
            A.Office365Instance,
            (B.UserId != null ? 1 : 0) AS HasDesktopUsage
    FROM  ExcelDailyUsage_All AS A
    LEFT OUTER JOIN ExcelDailyUsage_Desktop AS B
        ON A.UserId == B.UserId
        AND A.OmsTenantId == B.OmsTenantId;

[Privacy.Asset.LongTail(@longTailInput)] 
OUTPUT ExcelDailyUsage
TO SSTREAM @outputExcelMAU
CLUSTERED BY OmsTenantId
WITH STREAMEXPIRY "365";



//-------- PowerPoint --------


#DECLARE outputPowerPointMAU string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "PowerPointMAU", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));

InPowerPointDailyUsage =
    SSTREAM STREAMSET "/shares/IDEAs.Prod/Release/activeusage/powerpointcommercialuser/"
            PATTERN "%Y/%m/PowerPointActiveUsage_%Y_%m_%d.ss"
            RANGE __date = [@startdateString, @enddateString];

//Get All PowerPoint Usage (all platforms)
PowerPointDailyUsage_All = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InPowerPointDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase));


///Get PowerPoint Usage excluding Web and Mobile
PowerPointDailyUsage_Desktop = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InPowerPointDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase))
          AND Platform NOT IN ("Web", "Mobile");


////Add a flag for every user to indicate if there is Weband Mobile usage
PowerPointDailyUsage = 
    SELECT  A.UserId,
            A.OmsTenantId,
            A.Application,
            A.Office365Instance,
            (B.UserId != null ? 1 : 0) AS HasDesktopUsage
    FROM  PowerPointDailyUsage_All AS A
    LEFT OUTER JOIN PowerPointDailyUsage_Desktop AS B
        ON A.UserId == B.UserId
        AND A.OmsTenantId == B.OmsTenantId;
        
[Privacy.Asset.LongTail(@longTailInput)] 
OUTPUT PowerPointDailyUsage
TO SSTREAM @outputPowerPointMAU
CLUSTERED BY OmsTenantId
WITH STREAMEXPIRY "365";



//-------- Outlook --------


#DECLARE outputOutlookMAU string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "OutlookMAU", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));

InOutlookDailyUsage =
    SSTREAM STREAMSET "/shares/IDEAs.Prod/Release/activeusage/outlookcommercialuser/"
            PATTERN "%Y/%m/OutlookActiveUsage_%Y_%m_%d.ss"
            RANGE __date = [@startdateString, @enddateString];

//Get All Outlook Usage (all platforms)
OutlookDailyUsage_All = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InOutlookDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase));

///Get Outlook Usage excluding Web and Mobile
OutlookDailyUsage_Desktop = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InOutlookDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase))
          AND Platform NOT IN ("Web", "Mobile");


////Add a flag for every user to indicate if there is Web and Mobile usage
OutlookDailyUsage = 
    SELECT  A.UserId,
            A.OmsTenantId,
            A.Application,
            A.Office365Instance,
            (B.UserId != null ? 1 : 0) AS HasDesktopUsage
    FROM  OutlookDailyUsage_All AS A
    LEFT OUTER JOIN OutlookDailyUsage_Desktop AS B
        ON A.UserId == B.UserId
        AND A.OmsTenantId == B.OmsTenantId;
        
        
[Privacy.Asset.LongTail(@longTailInput)] 
OUTPUT OutlookDailyUsage
TO SSTREAM @outputOutlookMAU
CLUSTERED BY OmsTenantId
WITH STREAMEXPIRY "365";



//-------- OneNote --------


#DECLARE outputOneNoteMAU string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "OneNoteMAU", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));


InOneNoteDailyUsage =
    SSTREAM STREAMSET "/shares/IDEAs.Prod/Release/activeusage/onenotecommercialuser/"
            PATTERN "%Y/%m/OneNoteActiveUsage_%Y_%m_%d.ss"
            RANGE __date = [@startdateString, @enddateString];

//Get All OneNote Usage (all platforms)
OneNoteDailyUsage_All = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InOneNoteDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase));


///Get OneNote Usage excluding Web and Mobile
OneNoteDailyUsage_Desktop = 
    SELECT  DISTINCT UserId,
            OmsTenantId,
            Application,
            Office365Instance
    FROM InOneNoteDailyUsage
    WHERE 1==1
    AND IsMsftInternal != true
          AND !string.IsNullOrWhiteSpace(OmsTenantId)
          AND ! ("Perpetual".Equals(LicenseModel, StringComparison.OrdinalIgnoreCase))
          AND Platform NOT IN ("Web", "Mobile");


////Add a flag for every user to indicate if there is Weband Mobile usage
OneNoteDailyUsage = 
    SELECT  A.UserId,
            A.OmsTenantId,
            A.Application,
            A.Office365Instance,
            (B.UserId != null ? 1 : 0) AS HasDesktopUsage
    FROM  OneNoteDailyUsage_All AS A
    LEFT OUTER JOIN OneNoteDailyUsage_Desktop AS B
        ON A.UserId == B.UserId
        AND A.OmsTenantId == B.OmsTenantId;
    
[Privacy.Asset.LongTail(@longTailInput)] 

OUTPUT OneNoteDailyUsage
TO SSTREAM @outputOneNoteMAU
CLUSTERED BY OmsTenantId
WITH STREAMEXPIRY "365";



//-------- ALL --------

///Combine users from EXO and Other workload usage
TenantAllWorkloadUser =
    SELECT Application,
           OmsTenantId,
           UserId,
           HasDesktopUsage
    FROM EXODailyUsage
    GROUP BY Application,
             OmsTenantId,
             UserId,
           HasDesktopUsage
    UNION ALL
    SELECT Application,
           OmsTenantId,
           UserId,
           HasDesktopUsage
    FROM SPODailyUsage
    GROUP BY Application,
             OmsTenantId,
             UserId,
           HasDesktopUsage    
    UNION ALL
    SELECT Application,
           OmsTenantId,
           UserId,
           HasDesktopUsage
    FROM ODBDailyUsage
    GROUP BY Application,
             OmsTenantId,
           UserId,
           HasDesktopUsage
    UNION ALL
    SELECT Application,
           OmsTenantId,
           UserId,
           HasDesktopUsage
    FROM SfBDailyUsage
    GROUP BY Application,
             OmsTenantId,
           UserId,
           HasDesktopUsage    
    UNION ALL
    SELECT Application,
           OmsTenantId,
           UserId,
           HasDesktopUsage
    FROM TeamsDailyUsage
    GROUP BY Application,
             OmsTenantId,
           UserId,
           HasDesktopUsage
    UNION ALL
    SELECT Application,
           OmsTenantId,
           UserId,
           HasDesktopUsage
    FROM YammerDailyUsage
    GROUP BY Application,
             OmsTenantId,
           UserId ,
           HasDesktopUsage   
    UNION ALL
    SELECT Application,
           OmsTenantId,
           UserId,
           HasDesktopUsage
    FROM WordDailyUsage
    GROUP BY Application,
             OmsTenantId,
           UserId,
           HasDesktopUsage    
    UNION ALL
    SELECT Application,
           OmsTenantId,
           UserId,
           HasDesktopUsage
    FROM ExcelDailyUsage
    GROUP BY Application,
             OmsTenantId,
           UserId ,
           HasDesktopUsage   
    UNION ALL
    SELECT Application,
           OmsTenantId,
           UserId,
           HasDesktopUsage
    FROM PowerPointDailyUsage
    GROUP BY Application,
             OmsTenantId,
           UserId   ,
           HasDesktopUsage    
    UNION ALL
    SELECT Application,
           OmsTenantId,
           UserId,
           HasDesktopUsage
    FROM OutlookDailyUsage
    GROUP BY Application,
             OmsTenantId,
           UserId,
           HasDesktopUsage
    UNION ALL
    SELECT Application,
           OmsTenantId,
           UserId,
           HasDesktopUsage
    FROM OneNoteDailyUsage
    GROUP BY Application,
             OmsTenantId,
           UserId,
           HasDesktopUsage ; 

////Obtain unique user id for each tenant
TenantUniqueUser =
    SELECT OmsTenantId,
           UserId
    FROM TenantAllWorkloadUser
    GROUP BY OmsTenantId,
             UserId;



///Create Workload flags for each user
TenantUser_WorkloadFlags_Int =
    SELECT U. *,
           (A.UserId != null AND (A.Application == "EXO" OR A.Application == "SPO" OR A.Application == "ODB" OR A.Application == "SfB" OR A.Application == "Teams" OR A.Application == "Yammer" OR
           A.Application == "Word" OR A.Application == "Excel" OR A.Application == "PowerPoint" OR A.Application == "OneNote" OR A.Application == "Outlook") ? 1 : 0) AS HasO365Usage,
           (A.UserId != null AND A.Application == "EXO" ? 1 : 0) AS HasEXOUsage,
           (A.UserId != null AND A.Application == "SPO" ? 1 : 0) AS HasSPOUsage,
           (A.UserId != null AND A.Application == "ODB" ? 1 : 0) AS HasOD4BUsage,
           (A.UserId != null AND A.Application == "SfB" ? 1 : 0) AS HasSfBUsage,
           (A.UserId != null AND A.Application == "Teams" ? 1 : 0) AS HasTeamsUsage,
           (A.UserId != null AND A.Application == "Yammer" ? 1 : 0) AS HasYammerUsage,
           (A.UserId != null AND (A.Application == "Word" OR A.Application == "Excel" OR A.Application == "PowerPoint" OR A.Application == "OneNote" OR A.Application == "Outlook") ? 1 : 0) AS HasProPlusUsage,
           (A.UserId != null AND A.Application == "Word" ? 1 : 0) AS HasWordUsage,
           (A.UserId != null AND A.Application == "Excel" ? 1 : 0) AS HasExcelUsage,
           (A.UserId != null AND A.Application == "PowerPoint" ? 1 : 0) AS HasPowerPointUsage,
           (A.UserId != null AND A.Application == "OneNote" ? 1 : 0) AS HasOneNoteUsage,
           (A.UserId != null AND A.Application == "Outlook" ? 1 : 0) AS HasOutlookUsage,
           //O365 Usage with only ProPlus Desktop Usage
           (A.UserId != null AND (A.Application == "EXO" OR A.Application == "SPO" OR A.Application == "ODB" OR A.Application == "SfB" OR A.Application == "Teams" OR A.Application == "Yammer" OR 
              (A.HasDesktopUsage == 1 AND (A.Application == "Word" OR A.Application == "Excel" OR A.Application == "PowerPoint" OR A.Application == "OneNote" OR A.Application == "Outlook"))) ? 1 : 0) AS HasO365Usage_ProPlusDesktop,
           (A.UserId != null AND (A.Application == "EXO" OR A.Application == "SPO" OR A.Application == "ODB" OR A.Application == "SfB" OR A.Application == "Teams" OR A.Application == "Yammer") ? 1 : 0) AS HasO365Usage_withoutProPlus,
           ///ProPlus Desktop Usage
           (A.UserId != null AND A.HasDesktopUsage == 1 AND (A.Application == "Word" OR A.Application == "Excel" OR A.Application == "PowerPoint" OR A.Application == "OneNote" OR A.Application == "Outlook") ? 1 : 0) AS HasProPlusUsage_Desktop,
           (A.UserId != null AND A.HasDesktopUsage == 1 AND A.Application == "Word" ? 1 : 0) AS HasWordUsage_Desktop,
           (A.UserId != null AND A.HasDesktopUsage == 1 AND A.Application == "Excel" ? 1 : 0) AS HasExcelUsage_Desktop,
           (A.UserId != null AND A.HasDesktopUsage == 1 AND A.Application == "PowerPoint" ? 1 : 0) AS HasPowerPointUsage_Desktop,
           (A.UserId != null AND A.HasDesktopUsage == 1 AND A.Application == "OneNote" ? 1 : 0) AS HasOneNoteUsage_Desktop,
           (A.UserId != null AND A.HasDesktopUsage == 1 AND A.Application == "Outlook" ? 1 : 0) AS HasOutlookUsage_Desktop       
    FROM TenantUniqueUser AS U
         LEFT OUTER JOIN
             TenantAllWorkloadUser AS A
         ON U.OmsTenantId == A.OmsTenantId
            AND U.UserId == A.UserId;

////Create one row per User and Tenant
TenantUser_WorkloadFlags =
    SELECT OmsTenantId,
           UserId,
           MAX(HasO365Usage) AS HasO365Usage,
           MAX(HasEXOUsage) AS HasEXOUsage,
           MAX(HasSPOUsage) AS HasSPOUsage,
           MAX(HasOD4BUsage) AS HasOD4BUsage,
           MAX(HasSfBUsage) AS HasSfBUsage,
           MAX(HasTeamsUsage) AS HasTeamsUsage,
           MAX(HasYammerUsage) AS HasYammerUsage,
           MAX(HasProPlusUsage) AS HasProPlusUsage,
           MAX(HasWordUsage) AS HasWordUsage,
           MAX(HasExcelUsage) AS HasExcelUsage,
           MAX(HasPowerPointUsage) AS HasPowerPointUsage,
           MAX(HasOneNoteUsage) AS HasOneNoteUsage,
           MAX(HasOutlookUsage) AS HasOutlookUsage,
           ///O365Usage with ProPlus desktop usage
           MAX(HasO365Usage_ProPlusDesktop) AS HasO365Usage_ProPlusDesktop,
           MAX(HasO365Usage_withoutProPlus) AS HasO365Usage_withoutProPlus,
           ///ProPlus Desktop Usage
           MAX(HasProPlusUsage_Desktop) AS HasProPlusUsage_Desktop,
           MAX(HasWordUsage_Desktop) AS HasWordUsage_Desktop,
           MAX(HasExcelUsage_Desktop) AS HasExcelUsage_Desktop,
           MAX(HasPowerPointUsage_Desktop) AS HasPowerPointUsage_Desktop,
           MAX(HasOneNoteUsage_Desktop) AS HasOneNoteUsage_Desktop,
           MAX(HasOutlookUsage_Desktop) AS HasOutlookUsage_Desktop           
    FROM TenantUser_WorkloadFlags_Int
    GROUP BY OmsTenantId, UserId;
          

//////Aggregate at each workload level
TenantAllWorkloadMAU =
    SELECT OmsTenantId,
           COUNTIF(HasO365Usage == 1) AS O365MAU,
           COUNTIF(HasEXOUsage == 1) AS EXOMAU,
           COUNTIF(HasSPOUsage == 1) AS SPOMAU,
           COUNTIF(HasOD4BUsage == 1) AS OD4BMAU,
           COUNTIF(HasSfBUsage == 1) AS SfBMAU,
           COUNTIF(HasYammerUsage == 1) AS YammerMAU,
           COUNTIF(HasTeamsUsage == 1) AS TeamsMAU,
           COUNTIF(HasProPlusUsage == 1) AS ProPlusMAU,
           COUNTIF(HasWordUsage == 1) AS WordMAU,
           COUNTIF(HasExcelUsage == 1) AS ExcelMAU,
           COUNTIF(HasPowerPointUsage == 1) AS PowerPointMAU,
           COUNTIF(HasOneNoteUsage == 1) AS OneNoteMAU,
           COUNTIF(HasOutlookUsage == 1) AS OutlookMAU,
           //O365 MAU with ProPlus Desktop usage
           COUNTIF(HasO365Usage_ProPlusDesktop == 1) AS O365MAU_ProPlusDesktop,
           COUNTIF(HasO365Usage_withoutProPlus == 1) AS O365MAU_withoutProPlus,
           //ProPlus Desktop Usage
           COUNTIF(HasProPlusUsage_Desktop == 1) AS ProPlusMAU_Desktop,
           COUNTIF(HasWordUsage_Desktop == 1) AS WordMAU_Desktop,
           COUNTIF(HasExcelUsage_Desktop == 1) AS ExcelMAU_Desktop,
           COUNTIF(HasPowerPointUsage_Desktop == 1) AS PowerPointMAU_Desktop,
           COUNTIF(HasOneNoteUsage_Desktop == 1) AS OneNoteMAU_Desktop,
           COUNTIF(HasOutlookUsage_Desktop == 1) AS OutlookMAU_Desktop           
    FROM TenantUser_WorkloadFlags
    GROUP BY OmsTenantId;





//-------- Tenant Base --------

#DECLARE inputdate DateTime = @snapDateTime.AddDays(-1);

#DECLARE Tenantview_path string = @"/shares/IDEAs.Prod.Data/Publish/Profiles/Tenant/Commercial/IDEAsTenantProfile/Views/v2/IDEAsTenantProfile.view";

#DECLARE outputTenantProfile string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "Tenant_SubProfileData", @inputdate.Year, @inputdate.Month.ToString("D2"), @inputdate.Day.ToString("D2"));


TenantProfile  =
    VIEW @Tenantview_path
    PARAMS
    (
        HistoryDate = @inputdate
    );


///Get the tenant attributes
TenantProfile =
    SELECT Office365Instance,
           OMSTenantId,
           CreatedDate,
           IsTest,
           IsViral,
           IsFastTrackTenant,
           HasEducation,
           HasCharity,
           HasGovernment,
           HasNonProfit,
           HasQuickStart,
           HasPaidSeats,
           TenantCategory,
           CustomerSegmentGroup,
           MSSalesSubSegmentName,
           MSSalesAreaName,
           TotalAvailableUnits,
           EXOAvailableUnits,
           SPOAvailableUnits,
           OD4BAvailableUnits,
           SfbAvailableUnits,
           YammerAvailableUnits,
           TeamsAvailableUnits,
           ProPlusAvailableUnits,
            PaidAvailableUnits
            ,EXOPaidAvailableUnits
            ,ProPlusPaidAvailableUnits
            ,SPOPaidAvailableUnits
            ,OD4BPaidAvailableUnits
            ,SfbPaidAvailableUnits
            ,YammerPaidAvailableUnits
            ,TeamsPaidAvailableUnits
            ,EMSPaidAvailableUnits
            ,M365PaidAvailableUnits
            ,OfficePaidAvailableUnits,
           EXOEnabledUsers,
           SPOEnabledUsers,
           OD4BEnabledUsers,
           SFBEnabledUsers,
           YammerEnabledUsers,
           TeamEnabledUsers,
           PPDEnabledUsers,
           O365EnabledUsers,
           M365EnabledUsers,
           EMSEnabledUsers,
           O365E5EnabledUsers,
           M365E5EnabledUsers,
           EMSE5EnabledUsers
           ,IsM365
            ,HasM365PaidSeats
            ,HasM365SKUBusiness
            ,HasM365SKUEdu
            ,HasM365SKUF1
            ,HasM365SKUE3
            ,HasM365SKUE5
            ,HasEMSSkuE3
            ,HasEMSSkuE5
            ,HasEMSSku
            ,HasM365Sku
            ,HasOffice365Sku
            ,HasWindowsSku
            ,HasDynamicsSku
            ,HasOfficeSKUE1
            ,HasOfficeSKUE3
            ,HasOfficeSKUE4
            ,HasOfficeSKUE5
    FROM TenantProfile
    WHERE 1==1
          AND IsMSODSDeleted != "True"
      AND State != "Deleted";



OUTPUT TenantProfile
TO SSTREAM @outputTenantProfile
WITH STREAMEXPIRY "365";      



//-------- Combining profile and usage data --------



#DECLARE outputTenantProfileMAUMerge string = string.Format("{0}/{1}_{2}_{3}_{4}.ss",@outputfolderpath, "TenantProfileMAUMerge", @enddateDateTime.Year, @enddateDateTime.Month.ToString("D2"), @enddateDateTime.Day.ToString("D2"));



///////////Combine with Tenant Profile data 
TenantProfileMAUMerge =
    SELECT P.*,
           (U.OmsTenantId == null ? 0 : U.O365MAU) AS O365MAU,
           (U.OmsTenantId == null ? 0 : U.EXOMAU) AS EXOMAU,
           (U.OmsTenantId == null ? 0 : U.SPOMAU) AS SPOMAU,
           (U.OmsTenantId == null ? 0 : U.OD4BMAU) AS OD4BMAU,
           (U.OmsTenantId == null ? 0 : U.SfBMAU) AS SfBMAU,
           (U.OmsTenantId == null ? 0 : U.YammerMAU) AS YammerMAU,
           (U.OmsTenantId == null ? 0 : U.TeamsMAU) AS TeamsMAU,
           (U.OmsTenantId == null ? 0 : U.ProPlusMAU) AS ProPlusMAU,
           (U.OmsTenantId == null ? 0 : U.WordMAU) AS WordMAU,
           (U.OmsTenantId == null ? 0 : U.ExcelMAU) AS ExcelMAU,
           (U.OmsTenantId == null ? 0 : U.PowerPointMAU) AS PowerPointMAU,
           (U.OmsTenantId == null ? 0 : U.OneNoteMAU) AS OneNoteMAU,
           (U.OmsTenantId == null ? 0 : U.OutlookMAU) AS OutlookMAU,
           (U.OmsTenantId == null ? 0 : U.O365MAU_ProPlusDesktop) AS O365MAU_ProPlusDesktop,
           (U.OmsTenantId == null ? 0 : U.O365MAU_withoutProPlus) AS O365MAU_withoutProPlus,
           (U.OmsTenantId == null ? 0 : U.ProPlusMAU_Desktop) AS ProPlusMAU_Desktop,
           (U.OmsTenantId == null ? 0 : U.WordMAU_Desktop) AS WordMAU_Desktop,
           (U.OmsTenantId == null ? 0 : U.ExcelMAU_Desktop) AS ExcelMAU_Desktop,
           (U.OmsTenantId == null ? 0 : U.PowerPointMAU_Desktop) AS PowerPointMAU_Desktop,
           (U.OmsTenantId == null ? 0 : U.OneNoteMAU_Desktop) AS OneNoteMAU_Desktop,
           (U.OmsTenantId == null ? 0 : U.OutlookMAU_Desktop) AS OutlookMAU_Desktop
    FROM TenantProfile AS P
    LEFT OUTER JOIN TenantAllWorkloadMAU AS U
    ON P.OMSTenantId == U.OmsTenantId;

OUTPUT TenantProfileMAUMerge
TO SSTREAM @outputTenantProfileMAUMerge
WITH STREAMEXPIRY "365";
